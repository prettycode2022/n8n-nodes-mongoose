# MongoDB Mongoose n8n Community Node Requirements

## Project Overview
Create an n8n community node package for MongoDB operations using Mongoose ODM with the following components:

1. Main Node: MongoDbMongoose - For CRUD operations
2. Trigger Node: MongoDbChangeStream - For real-time change monitoring

## Technical Requirements

### General
- Node.js >= 18.10
- TypeScript implementation
- Mongoose ODM v8.0.0+
- Compatible with n8n workflow v1.0.0+
- Follow n8n community node standards

### MongoDbMongoose Node
- Support all basic CRUD operations (find, findOne, create, update, updateOne, delete, deleteOne)
- Support aggregation pipeline
- Support count operation
- Support bulk operations
- Support index management (create/drop/check indexes)
- Support schema validation
- Support transactions

### MongoDbChangeStream Node (Trigger)
- Implement as a separate trigger node
- Support watching changes at collection, database, and deployment levels
- Allow filtering by operation types (insert, update, delete, etc.)
- Support field selection (projection) to reduce data transfer
- Support fullDocument and fullDocumentBeforeChange options
- Multiple output formats (full, documents only, simplified)
- Resume capability using tokens
- Configurable polling and batch sizes

### Credentials
- Secure MongoDB connection credentials
- Support for authentication options
- Support for SSL/TLS connections
- Support for replica sets

## Implementation Details

### MongoDbMongoose Node Operations
- find: Query documents with filtering, sorting, and pagination
- findOne: Find a single document
- create: Insert new documents
- update: Update multiple documents
- updateOne: Update a single document
- delete: Delete multiple documents
- deleteOne: Delete a single document
- count: Count documents matching a query
- aggregate: Run aggregation pipeline
- bulkWrite: Perform multiple write operations
- createIndex: Create new indexes
- dropIndex: Remove existing indexes
- checkIndexes: Analyze index usage
- validateSchema: Validate documents against schema
- startTransaction/commitTransaction/abortTransaction: Transaction management

### MongoDbChangeStream Node Features
- Watch for real-time changes
- Filter by operation types
- Project specific fields
- Configure fullDocument options
- Set resume tokens
- Multiple output formats
- Metadata inclusion options
- Debug mode

### Helper Functions
- Connection management
- Schema generation
- Query processing
- Date conversion
- Response formatting

## File Structure
- nodes/MongoDbMongoose/MongoDbMongoose.node.ts
- nodes/MongoDbChangeStream/MongoDbChangeStream.node.ts
- nodes/MongoDbMongoose/helpers/index.ts
- credentials/MongoDbApi.credentials.ts
- index.js (entry point)

## Documentation Requirements
- Clear descriptions for all operations and parameters
- Examples for common use cases
- Proper error handling and user feedback